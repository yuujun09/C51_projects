C51 COMPILER V9.01   MAN                                                                   03/11/2021 20:41:58 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE MAN
OBJECT MODULE PLACED IN man.OBJ
COMPILER INVOKED BY: D:\C51\C51\BIN\C51.EXE man.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <reg52.h>
   2          
   3          sbit KEY_IN_1 = P2^4;
   4          sbit KEY_IN_2 = P2^5;
   5          sbit KEY_IN_3 = P2^6;
   6          sbit KEY_IN_4 = P2^7;
   7          sbit KEY_OUT_1 = P2^3;
   8          sbit KEY_OUT_2 = P2^2;
   9          sbit KEY_OUT_3 = P2^1;
  10          sbit KEY_OUT_4 = P2^0;
  11          signed long beats = 0;  //储存节拍数
  12          
  13          unsigned char code KeyCodeMap[4][4] = {         //标准键盘映射
  14                  { 0X31,0X32,0X33,0X26},
  15                  { 0X34,0X35,0X36,0X25},
  16                  { 0X37,0X38,0X39,0X28},
  17                  { 0X30,0X1B,0X0D,0X27}   
  18                  };
  19          
  20          unsigned char KeySta[4][4] = {                                  //存储矩阵按键状态
  21                  {1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}
  22                  };
  23          
  24          
  25          void StartMotor(unsigned long angle);
  26          void KeyDriver();
  27          
  28          void main()
  29          {
  30   1              EA = 1;
  31   1              TMOD = 0X01;
  32   1              TH0 = 0XFC;              //定时1ms
  33   1              TL0 = 0X67;
  34   1              ET0 = 1;
  35   1              TR0 = 1;
  36   1      
  37   1              while(1)
  38   1              {
  39   2                      KeyDriver();       //按键驱动函数
  40   2              }
  41   1      
  42   1              
  43   1      }
  44          
  45          void StartMotor(signed long angle)
  46          {
*** WARNING C235 IN LINE 46 OF MAN.C: parameter 1: different types
  47   1              EA = 0;                                                           //因为赋值为串口传输，中断可能会打断赋值，导致借位？
  48   1              beats = (angle*4076)/360;
  49   1              EA = 1;
  50   1      }
  51          
  52          void StopMotor()
  53          {
  54   1              EA = 0;
C51 COMPILER V9.01   MAN                                                                   03/11/2021 20:41:58 PAGE 2   

  55   1              beats = 0;
  56   1              EA = 1;
  57   1      }
  58          
  59          void KeyAction(signed char keycode)
  60          {
  61   1              static bit dirMotor = 0;                                                //记录电机旋转方向
  62   1              if(keycode >= 0x30 && keycode <= 0x39)
  63   1              {
  64   2                      if(dirMotor == 0)
  65   2                      {
  66   3                              StartMotor(360*(keycode - 0x30));
  67   3                      }
  68   2                      else
  69   2                      {
  70   3                              StartMotor(-360*(keycode - 0x30));              
  71   3                      }
  72   2              }
  73   1              else if(keycode == 0x26)
  74   1              {
  75   2                      dirMotor = 0;
  76   2              }
  77   1              else if(keycode == 0x28)
  78   1              {
  79   2                      dirMotor = 1;
  80   2              }
  81   1              else if(keycode == 0x25)
  82   1              {
  83   2                      StartMotor(90);
  84   2              }
  85   1              else if(keycode == 0x27)
  86   1              {
  87   2                      StartMotor(-90);
  88   2              }
  89   1              else if(keycode == 0x1B)
  90   1              {
  91   2                      StopMotor();
  92   2              }
  93   1      }
  94          
  95          
  96          
  97          void KeyDriver()         //检测按键状态
  98          {
  99   1              unsigned char i,j;
 100   1              static unsigned char backup [4][4] = {             //存储按键上一时刻状态
 101   1              {1,1,1,1},{1,1,1,1},{1,1,1,1},{1,1,1,1}
 102   1              };
 103   1              for(i=0;i<4;i++)
 104   1                      for(j=0;j<4;j++)
 105   1                      {
 106   2                              if(backup[i][j] != KeySta[i][j])                 //状态发生改变
 107   2                              {
 108   3                                      if(backup[i][j] == 0)                             //上一个时刻按键处于按下状态，并且状态发生改变，即当前按键已弹起
 109   3                                      {
 110   4                                              KeyAction(KeyCodeMap[i][j]);
 111   4                                      }
 112   3                                      backup[i][j] = KeySta[i][j];              //将当前按键状态赋给backup
 113   3                              }
 114   2                      }
 115   1      }
 116          
C51 COMPILER V9.01   MAN                                                                   03/11/2021 20:41:58 PAGE 3   

 117          void TurnMotor()
 118          {
 119   1              unsigned char tmp;      
 120   1              static unsigned char index = 0;
 121   1              unsigned char code BeatCode[8] = {                               //28BYJ-48步进电机8拍
 122   1              0X0E,0X0C,0X0D,0X09,0X0B,0X03,0X07,0X06};
 123   1              if(beats != 0)
 124   1              {
 125   2                      if(beats > 0)
 126   2                      {
 127   3                              index++;                                //电机正方向运行
 128   3                              index = index & 0x07;   
 129   3                              beats--;
 130   3                      }
 131   2                      else
 132   2                      {                                                  //电机逆方向运行
 133   3                              index--;
 134   3                              index = index & 0x07;
 135   3                              beats++;
 136   3                      }
 137   2                      tmp = P1;
 138   2                      tmp = tmp & 0xf0;                        //我们只使用P1口低4位，防止影响P1口高4位
 139   2                      tmp = tmp | BeatCode[index];
 140   2                      P1 = tmp;
 141   2              }
 142   1              else                               //节拍数为0时停止运行
 143   1              {
 144   2                      P1 = P1 | 0X0F;
 145   2              }
 146   1      
 147   1      }
 148          
 149          void KeyScan()
 150          {
 151   1              unsigned char i;
 152   1              static unsigned char keyout = 0;         //矩阵按键扫描输出索引
 153   1              static unsigned char keybuf[4][4] = {                   //矩阵按键扫描缓冲区
 154   1              {0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff},
 155   1              {0xff,0xff,0xff,0xff},{0xff,0xff,0xff,0xff}
 156   1              };
 157   1      
 158   1              //将一行4个按键送入缓冲区
 159   1              keybuf[keyout][0] = (keybuf[keyout][0] << 1) | KEY_IN_1;
 160   1              keybuf[keyout][1] = (keybuf[keyout][1] << 1) | KEY_IN_2;
 161   1              keybuf[keyout][2] = (keybuf[keyout][2] << 1) | KEY_IN_3;
 162   1              keybuf[keyout][3] = (keybuf[keyout][3] << 1) | KEY_IN_4;
 163   1              //消抖并更新按键状态
 164   1              for(i=0;i<4;i++)
 165   1              {
 166   2                      if ((keybuf[keyout][i] & 0x0f) == 0x00)
 167   2                      {       //连续4次扫描值为0，认为按键已稳定按下
 168   3                              KeySta[keyout][i] = 0;
 169   3                      }
 170   2                      else if ((keybuf[keyout][i] & 0x0f) == 0x0f)
 171   2                      {       //连续4次扫描值为1，认为按键以稳定弹起
 172   3                              KeySta[keyout][i] = 1;
 173   3                      }
 174   2              }
 175   1      
 176   1              //执行下一次扫描输出
 177   1              keyout++;               //输出索引值递增
 178   1              keyout &= 0x03; //索引值加到4归零
C51 COMPILER V9.01   MAN                                                                   03/11/2021 20:41:58 PAGE 4   

 179   1              switch(keyout)
 180   1              {
 181   2                      case 0: KEY_OUT_4 = 1; KEY_OUT_1 = 0; break;
 182   2                      case 1: KEY_OUT_1 = 1; KEY_OUT_2 = 0; break;
 183   2                      case 2: KEY_OUT_2 = 1; KEY_OUT_3 = 0; break;
 184   2                      case 3: KEY_OUT_3 = 1; KEY_OUT_4 = 0; break;
 185   2              }
 186   1      }
 187          
 188          
 189          void InterruptTimer0() interrupt 1
 190          {       
 191   1              static bit div = 0; //用于定时器计数
 192   1              
 193   1              TH0 = 0XF8;
 194   1              TL0 = 0XCD;
 195   1      
 196   1              KeyScan();
 197   1              div = ~div;
 198   1              if(div == 0)
 199   1              {
 200   2                      TurnMotor();
 201   2              }
 202   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    724    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     54       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
